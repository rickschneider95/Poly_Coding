knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(readr)
library(stringr)
cast_gender <- read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/next-bechdel/nextBechdel_castGender.csv")
crew_gender <- read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/next-bechdel/nextBechdel_crewGender.csv")
#View(new_bechdel)
head(cast_gender)
dim(cast_gender)
names(cast_gender)
summary(cast_gender)
#View(cast_gender)
#How many different movies are in the df?
cast_gender %>%
distinct(MOVIE) %>%
summarise(count_movies_cast=n())
head(crew_gender)
dim(crew_gender)
names(crew_gender)
summary(crew_gender)
#View(crew_gender)
#How many different movies are in the df?
crew_gender %>%
distinct(MOVIE) %>%
summarise(count_movies_crew=n())
#create  count table:
count_gender <- table(cast_gender$GENDER)
count_gender
#create a pie chart to visualize the count:
pie <- ggplot(cast_gender, aes(x = "", fill = factor(GENDER))) +
geom_bar(width = 1) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="GENDER",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
#calculate the percentage ratio:
count_gender <- data.frame(count_gender)
perc_female <- count_gender[count_gender$Var1=="Female",2]/(count_gender[count_gender$Var1=="Female",2]+count_gender[count_gender$Var1=="Male",2])
perc_female*100
#filter out leading characters:
leading_cast <- cast_gender %>%
filter(TYPE == "Leading")
#geberate a frequency count table:
leading_gender_count = table(leading_cast$GENDER)
leading_gender_count
#generate a pie chart with the gender of leading people:
pie <- ggplot(leading_cast, aes(x = "", fill = factor(GENDER))) +
geom_bar(width = 1) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="GENDER",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
#calculate the percentage ratio:
leading_gender_count <- data.frame(leading_gender_count)
perc_female <- leading_gender_count[leading_gender_count$Var1=="Female",2]/(leading_gender_count[leading_gender_count$Var1=="Female",2]+leading_gender_count[leading_gender_count$Var1=="Male",2])
perc_female*100
#As we need to count the gender for a few criteria, we create a function to have a reproductible code. In R, functions cannot return multiple values, so we need to create 2 seperate functions:
#count females function:
f_count_fem <- function(df){
num_fem <- df %>%
filter(GENDER == "Female") %>%
group_by(MOVIE) %>%
summarise(count_fem_cast = n())
return(num_fem)}
#count males function:
f_count_male <- function(df){
num_male <- df %>%
filter(GENDER == "Male") %>%
group_by(MOVIE) %>%
summarise(count_male_cast = n())
return(num_male)}
num_fem <- f_count_fem(cast_gender)
num_male <- f_count_male(cast_gender)
#Join the count per movie data frames and calculate the ratio:
my_bechdel <- inner_join(num_fem,num_male,by="MOVIE")
my_bechdel <- my_bechdel %>%
mutate(crit1_test = count_fem_cast/(count_fem_cast+count_male_cast),
crit1 = case_when(
crit1_test > 0.3  ~ 1, crit1_test <= 0.3 ~ 0))
table(my_bechdel$crit1)
#View(my_bechdel)
#use functions to count males and females having a leading role:
num_fem <- f_count_fem(leading_cast)
num_male <- f_count_male(leading_cast)
#View(num_fem)
#Reminder: leading_cast -> information about the leading actors for every movie
#select a list of distinct movies where we have information about a leading actor
my_bechdel2 <- leading_cast %>%
select(MOVIE) %>%
distinct(MOVIE)
#add the female count column:
my_bechdel2 <- right_join(num_fem,my_bechdel2,by="MOVIE")
my_bechdel2[is.na(my_bechdel2[,2]),2]=0
#add a male count column:
my_bechdel2 <- right_join(num_male,my_bechdel2,by="MOVIE")
my_bechdel2[is.na(my_bechdel2[,2]),2]=0
#calculate the ratio:
my_bechdel2 <-  my_bechdel2 %>%
mutate(crit2_test = count_fem_cast/(count_male_cast+count_fem_cast))
#final crit2 (1: passed criterium, 0: not passed)
my_bechdel2 <-  my_bechdel2 %>%
mutate(crit1_test = count_fem_cast/(count_fem_cast+count_male_cast),
crit2 = case_when(
crit2_test > 0.4  ~ 1, crit2_test <= 0.4 ~ 0))
table(my_bechdel2$crit2)
#16 out of 31 movies pass this part of the test (+/- 50%)
#View(my_bechdel2)
rick_test <- my_bechdel
rick_test <- rick_test %>%
left_join(my_bechdel2,by="MOVIE") %>%
select(MOVIE,crit1,crit2)
#if there is no data available, put a -1
rick_test[is.na(rick_test$crit2),"crit2"]=-1
#how many crit2 are equal to -1?
rick_test %>%
filter(crit2 == -1) %>%
summarise(count_minus1 = n())
#View(rick_test)
#this variable stores the amount of data we have in the type column with respect to different movies
types_count <- cast_gender %>%
select(MOVIE,TYPE) %>%
group_by(TYPE) %>%
distinct(MOVIE) %>%
summarize(count_movies=n())
#barplot of our resulting count table:
ggplot(types_count, aes(x=TYPE, y=count_movies)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="Ordered Bar Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
supp_gender <- cast_gender %>%
filter(TYPE == "Supporting")
#create a pie chart to visualize the count:
pie <- ggplot(supp_gender, aes(x = "", fill = factor(GENDER))) +
geom_bar(width = 1) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="GENDER",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
#use functions to count males and females having a supporting role:
num_fem <- f_count_fem(supp_gender)
num_male <- f_count_male(supp_gender)
#View(num_fem)
#select a list of distinct movies where we have information about a supporting actor
my_bechdel3 <- supp_gender %>%
select(MOVIE) %>%
distinct(MOVIE)
#View(my_bechdel3)
#add the female count column:
my_bechdel3 <- right_join(num_fem,my_bechdel3,by="MOVIE")
my_bechdel3[is.na(my_bechdel3[,2]),2]=0
#add a male count column:
my_bechdel3 <- right_join(num_male,my_bechdel3,by="MOVIE")
my_bechdel3[is.na(my_bechdel3[,2]),2]=0
#calculate the ratio:
my_bechdel3 <-  my_bechdel3 %>%
mutate(crit3_test = count_fem_cast/(count_male_cast+count_fem_cast))
#final crit3 (1: passed criterium, 0: not passed, -1 if NA as we do not have enough data)
my_bechdel3 <-  my_bechdel3 %>%
mutate(crit1_test = count_fem_cast/(count_fem_cast+count_male_cast),
crit3 = case_when(
crit3_test > 0.4  ~ 1,
crit3_test <= 0.4 ~ 0,
is.na(crit3_test) == TRUE ~ -1))
table(my_bechdel3$crit3)
#join to generate new df with 3 criteria:
rick_test <- rick_test %>%
left_join(my_bechdel3,by="MOVIE") %>%
select(MOVIE,crit1,crit2,crit3)
#rick_test <- rick_test %>%
#                mutate(result = crit1+crit2+crit3) %>%
#                filter(result == 2)
#View(rick_test)
#generate a dataframe with the top 5 payed actors for every movie:
top_pay <- cast_gender %>%
filter(BILLING %in% c(1,2,3,4,5))
#number of females in the top 5 for every movie:
num_fem <- f_count_fem(top_pay)
#initialize with a list of all the movies:
my_bechdel4 <- cast_gender %>%
select(MOVIE) %>%
distinct()
#add the female count column:
my_bechdel4 <- right_join(num_fem,my_bechdel4,by="MOVIE")
my_bechdel4[is.na(my_bechdel4[,2]),2]=0
my_bechdel4 <-  my_bechdel4 %>%
mutate(
crit4 = case_when(
count_fem_cast > 0  ~ 1,
count_fem_cast == 0  ~ 0,
))
table(my_bechdel4$crit4)
#store top 5 , top 4 and top 3 payed actors respectively:
top_pay5 <- top_pay
top_pay4 <- cast_gender %>%
filter(BILLING %in% c(1,2,3,4))
top_pay3 <- cast_gender %>%
filter(BILLING %in% c(1,2,3))
#generate 3 count plots that count the number of women and men for the 3 datasets respectively:
g5 <- ggplot(top_pay5,aes(GENDER) ) + geom_bar(aes(fill = GENDER))
g4 <- ggplot(top_pay4,aes(GENDER) ) + geom_bar(aes(fill = GENDER))
g3 <- ggplot(top_pay3,aes(GENDER) ) + geom_bar(aes(fill = GENDER))
#top 5 payed actors, plot the count of women, men and unknown:
g5
#top 4 payed actors, plot the count of women, men and unknown:
g4
#top 3 payed actors, plot the count of women, men and unknown:
g3
#Change based on different idea
#store the different departments:
dep <- crew_gender %>%
select(DEPARTMENT) %>%
distinct()
dep
#first, modify the crew_gender data set to make it suitable for our analysis.
#change the name from GENDER_GUESS to GENDER:
crew_gender <- crew_gender %>% rename(GENDER = GENDER_GUESS)
#delete the "-(2016)" that is added to every movie, so that we can perfom a join operator
crew_gender <- crew_gender %>% mutate(MOVIE = str_sub(MOVIE,1,str_length(MOVIE)-7))
#crew that does stunts
stunt <- crew_gender %>%
filter(DEPARTMENT == "Stunts_")
#create a pie chart to visualize the count:
pie <- ggplot(stunt, aes(x = "", fill = factor(GENDER))) +
geom_bar(width = 1) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="GENDER",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
#crew that does make-up:
makeup <- crew_gender %>%
filter(DEPARTMENT == "Makeup Department_")
#create a pie chart to visualize the count:
pie2 <- ggplot(makeup, aes(x = "", fill = factor(GENDER))) +
geom_bar(width = 1) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="GENDER",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie2 + coord_polar(theta = "y", start=0)
#count females function:
f_count_fem_crew <- function(df){
num_fem <- df %>%
filter(GENDER == "female") %>%
group_by(MOVIE) %>%
summarise(count_fem_cast = n())
return(num_fem)}
#count males function:
f_count_male_crew <- function(df){
num_male <- df %>%
filter(GENDER == "male") %>%
group_by(MOVIE) %>%
summarise(count_male_cast = n())
return(num_male)}
#number of female stunman:
num_fem_stunt <- f_count_fem_crew(stunt)
#number of male makeup artists:
num_male_makeup <- f_count_male_crew(makeup)
#initialize as list of all movies:
my_bechdel5 <- cast_gender %>%
select(MOVIE) %>%
distinct()
View(my_bechdel5)
#add female stuntman count column:
my_bechdel5 <- right_join(num_fem_stunt,my_bechdel5,by="MOVIE")
#replace NAs by 0
my_bechdel5[is.na(my_bechdel5[,2]),2]=0
#add male makeup artists:
my_bechdel5 <- right_join(num_male_makeup,my_bechdel5,by="MOVIE")
#replace NAs by 0
my_bechdel5[is.na(my_bechdel5[,2]),2]=0
#create the crit5 column: if not 0 in both columns for 1 movie --> pass test
my_bechdel5 <-  my_bechdel5 %>%
mutate(
crit5 = case_when(
count_male_cast != 0 & count_fem_cast != 0 ~ 1, #if both are different from 0, pass test(->1)
count_male_cast == 0 | count_fem_cast == 0 ~ 0 #if one at least is equal to 0 , do not pass the test (->0)
) )
table(my_bechdel5$crit5)
#View(my_bechdel5)
#revenue <- read_csv("data/Bechdel-master_revenue.csv")
#delete the index column and prepare table for join operation:
#revenue <- revenue %>%
#              select(-1) %>%
#              rename(MOVIE=Movie)
#View(revenue)
#join the data with a list of movies that we are going to test:
#movie_list <- cast_gender %>%
#                  select(MOVIE) %>%
#                  distinct()
#View(movie_list)
#revenue <- inner_join(movie_list,revenue,by="MOVIE")
#View(revenue)
#join to generate new df with 5 criteria:
rick_test <- rick_test %>%
left_join(my_bechdel5,by="MOVIE") %>%
select(MOVIE,crit1,crit2,crit3,crit5)
View(rick_test)
#add result column-> 1 : passed, 0 : not passed, -1 : not considered
rick_test <- rick_test %>% mutate(result = 0)
View(rick_test)
#Finally, look for crit5, and overwrite result if it passed crit5
#Remember: passing crit5 means that the test is passed automatically:
rick_test <- rick_test %>%
mutate(result = case_when(
crit5 == 1 ~ result =1
#Finally, look for crit5, and overwrite result if it passed crit5
#Remember: passing crit5 means that the test is passed automatically:
rick_test <- rick_test %>%
mutate(result = case_when(
crit5 == 1 ~ 1
))
View(rick_test)
#add result column-> 1 : passed, 0 : not passed, -1 : not considered
rick_test <- rick_test %>% mutate(result = 0)
#Finally, look for crit5, and overwrite result if it passed crit5
#Remember: passing crit5 means that the test is passed automatically:
rick_test <- rick_test %>%
mutate(result = case_when(
crit5 == 1 ~ 1,
crit5 != 1 ~ result
))
View(rick_test)
